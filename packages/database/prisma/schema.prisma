datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?         @unique
  emailVerified    DateTime?       @map("email_verified")
  image            String?
  accounts         Account[]
  sessions         Session[]
  stripeCustomerId String?
  // Optional for WebAuthn support
  Authenticator    Authenticator[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  LeadMagnet LeadMagnet[]

  @@map("users")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id") @db.ObjectId
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model LeadMagnet {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String    @default("")
  image       String    @default("")
  tagline     String    @default("")
  category    String    @default("")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  status      String    @default("pending")
  webhook     String    @default("")
  prompt      String    @default("")
  provider    String    @default("Open AI")
  model       String    @default("gpt-4o-mini")
  output      String    @default("text")
  styles      Json?     @default("{}")
  components  Json?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now()) @updatedAt
}
