datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?         @unique
  emailVerified    DateTime?       @map("email_verified")
  image            String?
  bio              String?
  key              String?         @default(uuid())
  role             String?         @default("user")
  accounts         Account[]
  sessions         Session[]
  stripeCustomerId String?
  // Optional for WebAuthn support
  Authenticator    Authenticator[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  LeadMagnet LeadMagnet[]
  EmailLog   EmailLog[]
  ApiKey     ApiKey[]
  Payments   Payment[]
  Credit     Credit?

  @@map("users")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id") @db.ObjectId
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model LeadMagnet {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String            @default("")
  image            String            @default("")
  tagline          String            @default("")
  category         String            @default("")
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @db.ObjectId
  status           String            @default("pending")
  webhook          String            @default("") // Webhook URL
  prompt           String            @default("")
  provider         String            @default("Open AI")
  model            String            @default("gpt-4o-mini")
  output           String            @default("text")
  styles           Json?             @default("{}")
  public           Boolean           @default(false)
  components       Json?
  emailSubject     String?           @default("") // New field for storing email subject
  emailContent     String?           @default("") // New field for storing email content
  usedCount        Int               @default(0)
  lastUsedAt       DateTime?
  impressionsCount Int               @default(0)
  leadMagnetUsages LeadMagnetUsage[]
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @default(now()) @updatedAt
  apiKeyId         String?           @db.ObjectId
  apiKey           ApiKey?           @relation(fields: [apiKeyId], references: [id])

  @@index([public])
  @@index([category])
}

model LeadMagnetUsage {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  leadMagnet    LeadMagnet @relation(fields: [leadMagnetId], references: [id])
  leadMagnetId  String     @db.ObjectId
  ipAddress     String
  payload       Json?      @default("{}")
  consumedAt    DateTime   @default(now()) // Stores the time of consumption
  webhookStatus String     @default("pending") // Logs webhook status: pending, success, failed
  emailSent     Boolean    @default(false) // Track if the test email has been sent
}

model EmailLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  emailType String // To track which day's email was sent (Day 1, Day 2, etc.)
  sentAt    DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("email_logs")
}

model ApiKey {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  keyName    String
  apiKey     String
  provider   String
  isDefault  Boolean      @default(false)
  userId     String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  LeadMagnet LeadMagnet[]

  @@map("api_keys")
}

model Credit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  total     Int      @default(0) // Total AI credits
  used      Int      @default(0) // Used AI credits
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("credits")
}

enum PlanTier {
  ONE_TIME
  LIFE_TIME
  SUBSCRIPTION
  CREDIT
}

model Payment {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  stripeSessionId       String    @unique // Stripe session ID
  stripeCustomerId      String // Stripe customer ID
  userId                String    @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planType              PlanTier? // "one-time", "lifetime", or "subscription"
  credits               Int // Number of credits associated with the plan
  price                 Float // Price of the plan
  subscriptionId        String? // Subscription ID for subscriptions
  subscriptionStartDate DateTime? // Start date of the subscription
  subscriptionEndDate   DateTime? // End date of the subscription
  subscriptionStatus    String? // Status of the subscription (e.g., "active", "canceled", "expired")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("payments")
}
